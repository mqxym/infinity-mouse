name: Python Package Release

on:
  release:
    types: [published]
  push:
    branches:
        - main 

permissions:
  contents: read
  packages: write 
  id-token: write

jobs:
  test:
    name: Test on Multiple Python Versions
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
    
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
    
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # pip install flake8

      - name: Run Script in Test Mode
        run: |
          python run.py --test
        continue-on-error: true  # Avoid failing workflow due to timeout
    
    #  - name: Lint with flake8
    #    run: |
    #      flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #      flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    #
    #  - name: Run Tests
    #    run: |
    #      python -m unittest discover tests
  
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Build Dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel twine

      - name: Build Prerelease Distributions
        if: github.event.release.prerelease == true
        run: |
          python setup.py sdist bdist_wheel
        env:
          BUILD_TYPE: prerelease

      - name: Upload Prerelease Artifacts
        if: github.event.release.prerelease == true
        uses: actions/upload-artifact@v4
        with:
          name: prerelease-dist
          path: dist/

      - name: Build Release Distributions
        if: github.event.release.prerelease == false
        run: |
          python setup.py sdist bdist_wheel
        env:
          BUILD_TYPE: release

      - name: Upload Release Artifacts
        if: github.event.release.prerelease == false
        uses: actions/upload-artifact@v4
        with:
          name: release-dist
          path: dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    permissions:
        id-token: write
    #environment:
    #  name: pypi
    if: github.event.release.prerelease == false

    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          #user: __token__
          #password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist

  publish-prerelease:
    name: Publish Pre-release to TestPyPI
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
    #environment:
    #  name: pypi
    if: github.event.release.prerelease == true

    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: prerelease-dist
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          #user: __token__
          #password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          #repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/

  #notify:
  #  name: Notify Release
  #  runs-on: ubuntu-latest
  #  needs: [publish, publish-prerelease]
  #  steps:
  #    - name: Send Release Notification
  #      uses: some/notification-action@v1
  #      with:
  #        message: "New release ${{ github.event.release.name }} has been published to PyPI."
